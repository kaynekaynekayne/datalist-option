<template>
    <b-row class="mt-2 pl-2 pr-2">
        <!-- size, chromicity 선택 -->
        <b-row>
            <b-col class="fontSize14 pt-1">
                <div @click="onCopySize">Size</div>
            </b-col>
            <b-col>
                <b-form-select class="inputCustom" v-model="rbcSize" size="sm" :options="rbcSizeOptions"
                ></b-form-select>
            </b-col>
        </b-row>
        <b-row class="mt-1">
            <b-col class="fontSize14 pt-1">
                <div @click="onCopyChrom">Chromicity</div>
            </b-col>
            <b-col>
                <b-form-select class="inputCustom" v-model="rbcChromia" size="sm" :options="rbcChromiaOptions"></b-form-select>
            </b-col>
        </b-row>


        <!--
            'div 안에 목록을 추가하게 만드는' input을 생성 후
            div의 세로 길이를 설정하고 overflow-y: scroll; 설정
            => 목록이 늘어날 때 스크롤이 생김
            => 목록이 늘어날 때 마다 스크롤이 목록의 맨밑에 오게끔 설정
            
        -->
        <!--리마크 선택 후 엔터로 추가-->
        <b-row>
            <b-col>
                <strong>리마크 선택</strong>
            </b-col>
            <b-col>
                <b-input-group size="sm">
                <b-form-input
                    size="sm"
                    placeholder="Remark"
                    autocomplete="off"
                    v-model="searchRemark"
                    @keyup.enter="onEnterRemark"
                    ref="remarkInput"
                ></b-form-input>
                <div class="searchFrame remarkSearch" ref="scrollContainer">
                    <div
                        class="dataRemarkOptions"
                        v-for="(opt,i) in remarkOptions"
                        :key="i"
                        :value="opt.title"
                        :class="{active:i===selectedOption}"
                        ref="option"
                    >
                        {{opt.title}}
                    </div>
                </div>
                </b-input-group>
            </b-col>
        </b-row>


        <!--리마크 모음-->
        <b-row>
            <b-col class="pointer pl-2 pr-2">
                <b-form-input type="text"
                    :id="'remark' + index"
                    v-for="remarkItem, index in remarkContents" :key="index"
                    v-model="remarkItem.title" @input="onChangeInput(remarkItem)"
                    size="sm"
                    @keyup="onClickInput($event, index)"
                    @focus="onFocusInput($event, index)"
                    @select="onSelectText"
                    style="font-size: 12px;"
                    @keydown="onPaste($event, index)"
                    >
                </b-form-input>
            </b-col>
        </b-row>
        <!-- <input type="hidden" id="focusRemark" :value="focusRemark"> -->
    </b-row>
</template>

<script>
    export default {
        data() {
            return {
                selectedOption:-1,
                rbcSize: '01',
                rbcSizeOptions: [
                    { value: '01', text: 'microcytic' },
                    { value: '02', text: 'normocytic' },
                    { value: '03', text: 'macrocytic' }
                ],
                rbcChromia: '01',
                rbcChromiaOptions: [
                    { value: '01', text: 'hypochromic' },
                    { value: '02', text: 'normochromic' },
                    { value: '03', text: 'hyperchromic' }
                ],
                copied:"",
                searchRemark: "",
                remarkOptions:[
                    { title: "a옵션" },
                    { title: "b옵션" },
                    { title: "c옵션" },
                    { title: "d옵션" },
                    { title: "e옵션" },
                    { title: "f옵션" },
                    { title: "g옵션" },
                ],
                remarkContents: [
                    { text: "aa" },
                    { text: "bb" },
                    { text: "cc" },
                    { text: "dd" },
                    { text: "ee" },
                    { text: "ff" },
                    { text: "gg" },
                ],
            };
        },
        methods:{
            onEnterRemark () {
                if (this.selectedOption >= 0 && this.selectedOption < this.remarkOptions.length) {
                    this.searchRemark = this.remarkOptions[this.selectedOption].title
                }

                if (this.remarkContents === null) {
                    this.remarkContents = []
                }

                this.remarkOptions.forEach( opt => {
                    if (opt.title === this.searchRemark) {
                    
                        var contents = opt.content.split('\n')

                        for (var i = 0; i < contents.length; i++) {
                            if (contents[i] !== '') {
                                var obj = {
                                    remarkCd: opt.title,
                                    text: contents[i]
                                }
                                this.remarkContents.push(obj)
                            }
                        }
                    }
                })
            },
            onCopySize (evt) {
                if (evt.ctrlKey) {
                    console.log("복사")
                    this.copied = this.rbcSizeOptions.find(opt => opt.value === this.rbcSize).text;
                }
            },
            onCopyChrom (evt) {
                if (evt.ctrlKey) {                  
                    console.log("복사")
                    this.copied = this.rbcChromiaOptions.find(opt => opt.value === this.rbcChromia).text;
                }
            },
            onPaste (evt, index) {
                if (evt.ctrlKey && evt.key === "v") {
                    console.log("복붙", index)
                    evt.preventDefault();
                    this.remarkContents[index].title = this.remarkContents[index].title + " " +this.copied
                }
            },
            onClickInput (){
            
            },
            onFocusInput (){

            },
            onSelectText ( ){

            }
        },
        mounted(){
            this.EventBus.$on('LOG_TEXT',(item)=>{
                console.log(item)
            })
        }
    };
</script>

<style scoped>
    .datalist-container {
        overflow-y: auto;
    }

    /* <datalist> 내부 스크롤 바 스타일을 조절합니다. */
    .transparent-scroll::-webkit-scrollbar {
        width: 18px; /* 스크롤 바의 너비를 설정하세요. */
    }

    .transparent-scroll::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0); /* 스크롤 바의 색상을 투명하게 만듭니다. */
    }
</style>
